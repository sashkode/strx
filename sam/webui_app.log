2025-09-06 11:02:01,880 |  DEBUG: Skipping structural validation for app 'orchestrator-agent_app' (using app_module)
2025-09-06 11:02:01,880 |  DEBUG: Skipping structural validation for app 'a2a_webui_app' (using app_module)
2025-09-06 11:02:01,880 |  INFO: Starting Solace AI Event Connector
2025-09-06 11:02:01,880 |  INFO: Creating app orchestrator-agent_app
2025-09-06 11:02:01,882 |  INFO: On macOS. Applying asyncio child watcher fix for Python 3.11.4
2025-09-06 11:02:01,882 |  INFO: Successfully applied asyncio fix. get_child_watcher is now patched to use ThreadedChildWatcher.
2025-09-06 11:02:01,882 |  INFO: On macOS. Applying asyncio child watcher fix for Python 3.11.4
2025-09-06 11:02:01,882 |  INFO: Successfully applied asyncio fix. get_child_watcher is now patched to use ThreadedChildWatcher.
2025-09-06 11:02:01,903 |  DEBUG: Initializing A2A_ADK_App...
2025-09-06 11:02:01,903 |  INFO: Configuring A2A_ADK_App for Agent: 'OrchestratorAgent' in Namespace: 'default_namespace/'
2025-09-06 11:02:01,903 |  INFO: Automatically generated subscriptions for Agent 'OrchestratorAgent': [{'topic': 'default_namespace/a2a/v1/agent/request/OrchestratorAgent'}, {'topic': 'default_namespace/a2a/v1/discovery/agentcards'}, {'topic': 'default_namespace/a2a/v1/agent/response/OrchestratorAgent/>'}, {'topic': 'default_namespace/a2a/v1/agent/status/OrchestratorAgent/>'}]
2025-09-06 11:02:01,903 |  DEBUG: Replaced 'components' in app_info with programmatic definition.
2025-09-06 11:02:01,903 |  DEBUG: Injected broker.input_enabled=True and broker.output_enabled=True
2025-09-06 11:02:01,903 |  DEBUG: Injected generated broker.queue_name: default_namespace/q/a2a/OrchestratorAgent
2025-09-06 11:02:01,903 |  DEBUG: Set broker_config.temporary_queue = True
2025-09-06 11:02:01,903 |  DEBUG: Validating app_config for app 'orchestrator-agent_app' against schema.
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'global_instruction': 
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'inject_current_time': True
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'memory_service': {'type': 'memory'}
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'tool_output_save_threshold_bytes': 2048
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'tool_output_llm_return_max_bytes': 4096
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'extract_content_from_artifact_config': {}
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'mcp_intelligent_processing': {}
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'mcp_tool_response_save_threshold_bytes': 2048
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'mcp_tool_llm_return_max_bytes': 4096
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'schema_max_keys': 20
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'enable_auto_continuation': True
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'stream_batching_threshold_bytes': 0
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'max_message_size_bytes': 10000000
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'text_artifact_content_max_length': 1000
2025-09-06 11:02:01,903 |  DEBUG: App 'orchestrator-agent_app' Applying default value for parameter 'max_llm_calls_per_task': 20
2025-09-06 11:02:01,903 |  DEBUG: Initializing simplified flow for app orchestrator-agent_app
2025-09-06 11:02:01,905 |  DEBUG: Using component_class SamAgentComponent for component 'None'
2025-09-06 11:02:01,905 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  No 'config_parameters' defined in module_info. Skipping config validation.
2025-09-06 11:02:01,905 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing SamComponentBase...
2025-09-06 11:02:01,905 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  SamComponentBase initialized successfully.
2025-09-06 11:02:01,905 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing A2A ADK Host Component...
2025-09-06 11:02:01,905 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Default session behavior set to: PERSISTENT
2025-09-06 11:02:01,905 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Artifact Handling Mode: reference
2025-09-06 11:02:01,905 |  WARNING: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Artifact handling mode 'reference' selected, but this component does not currently host an endpoint to serve artifacts. Clients may not be able to retrieve referenced artifacts.
2025-09-06 11:02:01,905 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Configuration retrieved successfully.
2025-09-06 11:02:01,906 |  INFO: InvocationMonitor initialized. Logging to directory: /tmp/solace-agent-mesh
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing synchronous ADK services...
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing Session Service of type: memory
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing Artifact Service of type: filesystem
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Wrapping artifact service with dynamic ScopedArtifactServiceWrapper.
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing Memory Service of type: memory
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Synchronous ADK services initialized.
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Scheduling agent card publishing every 10 seconds.
2025-09-06 11:02:01,906 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initialization complete for agent: OrchestratorAgent
2025-09-06 11:02:01,906 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Applying default value for parameter 'create_queue_on_start': True
2025-09-06 11:02:01,906 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Applying default value for parameter 'copy_user_properties': False
2025-09-06 11:02:01,906 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Applying default value for parameter 'discard_on_ttl_expiration': False
2025-09-06 11:02:01,906 |  DEBUG: A2A_ADK_App initialization complete.
2025-09-06 11:02:01,906 |  INFO: Creating app a2a_webui_app
2025-09-06 11:02:01,910 |  DEBUG: BaseGatewayApp.__init_subclass__ created merged app_schema for WebUIBackendApp with 32 params.
2025-09-06 11:02:01,910 |  DEBUG: a2a_webui_app Initializing WebUIBackendApp...
2025-09-06 11:02:01,910 |  DEBUG: Initializing BaseGatewayApp with app_info: a2a_webui_app
2025-09-06 11:02:01,910 |  INFO: Generated unique gateway_id: gdk-gateway-68d417d6
2025-09-06 11:02:01,911 |  WARNING: [a2a_webui_app] Configuration key 'gateway_artifact_content_limit_bytes' (value: 10000000) is deprecated. Please use 'gateway_max_artifact_resolve_size_bytes'. Using value from old key.
2025-09-06 11:02:01,911 |  INFO: Generated Solace subscriptions for gateway 'gdk-gateway-68d417d6': [{'topic': 'default_namespace/a2a/v1/discovery/agentcards'}, {'topic': 'default_namespace/a2a/v1/gateway/response/gdk-gateway-68d417d6/>'}, {'topic': 'default_namespace/a2a/v1/gateway/status/gdk-gateway-68d417d6/>'}]
2025-09-06 11:02:01,911 |  DEBUG: Injected broker settings for gateway 'gdk-gateway-68d417d6': {'dev_mode': True, 'broker_url': 'ws://localhost:8080', 'broker_username': 'default', 'broker_password': 'default', 'broker_vpn': 'default', 'temporary_queue': True, 'input_enabled': True, 'output_enabled': True, 'queue_name': 'default_namespace/q/gdk/gateway/gdk-gateway-68d417d6'}
2025-09-06 11:02:01,911 |  DEBUG: Validating app_config for app 'a2a_webui_app' against schema.
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'gateway_max_artifact_resolve_size_bytes': 104857600
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'gateway_recursive_embed_depth': 12
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'artifact_handling_mode': reference
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'gateway_max_message_size_bytes': 10000000
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'fastapi_https_port': 8443
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'resolve_artifact_uris_in_gateway': True
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'frontend_auth_login_url': 
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'frontend_use_authorization': False
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'frontend_redirect_url': 
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'external_auth_callback_uri': 
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'external_auth_service_url': http://localhost:8080
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'external_auth_provider': 
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'ssl_keyfile': 
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'ssl_certfile': 
2025-09-06 11:02:01,911 |  DEBUG: App 'a2a_webui_app' Applying default value for parameter 'ssl_keyfile_password': 
2025-09-06 11:02:01,911 |  DEBUG: Initializing simplified flow for app a2a_webui_app
2025-09-06 11:02:01,911 |  DEBUG: Using component_class WebUIBackendComponent for component 'None'
2025-09-06 11:02:01,911 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  No 'config_parameters' defined in module_info. Skipping config validation.
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Initializing SamComponentBase...
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  SamComponentBase initialized successfully.
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Initializing Base Gateway Component...
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Retrieved common configs: Namespace=default_namespace/, GatewayID=gdk-gateway-68d417d6
2025-09-06 11:02:01,911 |  INFO: [CoreA2AService] Initialized with namespace: default_namespace/
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Initializing Artifact Service of type: filesystem
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Wrapping artifact service with dynamic ScopedArtifactServiceWrapper.
2025-09-06 11:02:01,911 |  DEBUG: [TaskContextManager] Initialized.
2025-09-06 11:02:01,911 |  INFO: [IdentityFactory] No 'identity_service' configuration found. Skipping creation.
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Middleware system initialized (using default configuration resolver).
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Base Gateway Component initialized successfully.
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Initializing Web UI Backend Component...
2025-09-06 11:02:01,911 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  WebUI-specific configuration retrieved (Host: 127.0.0.1, Port: 8000).
2025-09-06 11:02:01,911 |  INFO: [SessionManager] Initialized.
2025-09-06 11:02:01,912 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Web UI Backend Component initialized.
2025-09-06 11:02:01,912 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_output]  Applying default value for parameter 'create_queue_on_start': True
2025-09-06 11:02:01,912 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_output]  Applying default value for parameter 'copy_user_properties': False
2025-09-06 11:02:01,912 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_output]  Applying default value for parameter 'discard_on_ttl_expiration': False
2025-09-06 11:02:01,912 |  INFO: BaseGatewayApp 'a2a_webui_app' initialized successfully.
2025-09-06 11:02:01,912 |  DEBUG: a2a_webui_app WebUIBackendApp initialization complete.
2025-09-06 11:02:01,912 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Starting SamComponentBase run method.
2025-09-06 11:02:01,912 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing asyncio event loop in dedicated thread...
2025-09-06 11:02:01,912 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Async operations thread started.
2025-09-06 11:02:01,912 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Starting SamComponentBase run method.
2025-09-06 11:02:01,913 |  INFO: Solace AI Event Connector started successfully
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Starting _async_setup_and_run as an asyncio task.
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Initializing asyncio event loop in dedicated thread...
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Async operations thread started.
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Running asyncio event loop forever (or until stop_signal).
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Starting _async_setup_and_run as an asyncio task.
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Loading tools asynchronously in dedicated thread...
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Running asyncio event loop forever (or until stop_signal).
2025-09-06 11:02:01,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Processing 2 tool configurations: ['builtin-group', 'builtin-group']
2025-09-06 11:02:01,913 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Starting _start_listener() to initiate external platform connection.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Loading tools from 'tools' list configuration...
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  [_start_listener] Attempting to start FastAPI/Uvicorn server...
2025-09-06 11:02:01,914 |  INFO: Loaded 7 tools from built-in group: artifact_management
2025-09-06 11:02:01,914 |  INFO: Loaded 1 tools from built-in group: data_analysis
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Implicitly loaded internal framework tool: _notify_artifact_save
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Implicitly loaded internal framework tool: _continue_generation
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Finished loading tools. Total tools for ADK: 10. Total SAM built-ins for prompt: 10. Peer tools added dynamically.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing ADK Agent/Runner asynchronously in dedicated thread...
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing ADK Agent 'OrchestratorAgent' (Peer tools & instructions added via callback)...
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Applying default resilience settings for LiteLlm model (num_retries=3, timeout=120). These can be overridden in YAML.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initialized LiteLlm model: openai/gpt-4o-mini
2025-09-06 11:02:01,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Attached host_component reference to AppLlmAgent.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added repair_history_callback to before_model chain.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added _inject_peer_tools_callback to before_model chain.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added _filter_tools_by_capability_callback to before_model chain.
2025-09-06 11:02:01,914 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added _inject_gateway_instructions_callback to before_model chain.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added inject_dynamic_instructions_callback to before_model chain.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Final before_model_callback chain (Solace logging now occurs last) assigned to agent.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Assigned notify_tool_invocation_start_callback as before_tool_callback.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Chained 'manage_large_mcp_tool_responses_callback' and 'after_tool_callback_inject_metadata' as after_tool_callback.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added process_artifact_blocks_callback to after_model chain.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Added auto_continue_on_max_tokens_callback to after_model chain.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Chained all after_model_callbacks and assigned to agent.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  ADK Agent 'OrchestratorAgent' created. Callbacks assigned.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Initializing ADK Runner for agent 'OrchestratorAgent'...
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  ADK Runner created successfully.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Populating agent card tool manifest...
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Agent card tool manifest populated with 10 tools.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Async initialization steps complete in dedicated thread.
2025-09-06 11:02:01,915 |  INFO: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  _perform_async_init: Signaling success to main thread.
2025-09-06 11:02:01,930 |  INFO: Router for A2A Message Visualization initialized.
2025-09-06 11:02:01,933 |  INFO: FastAPI application instance created (endpoints/middleware/static files setup deferred until component startup).
2025-09-06 11:02:01,933 |  INFO: Setting up FastAPI dependencies, middleware, and routers...
2025-09-06 11:02:01,934 |  INFO: [Dependencies] SAC Component instance provided.
2025-09-06 11:02:01,934 |  INFO: [Dependencies] API configuration provided.
2025-09-06 11:02:01,934 |  INFO: API configuration extracted and stored.
2025-09-06 11:02:01,934 |  INFO: CORSMiddleware added with origins: ['http://localhost:3000', 'http://127.0.0.1:3000']
2025-09-06 11:02:01,934 |  INFO: SessionMiddleware added.
2025-09-06 11:02:01,934 |  INFO: AuthMiddleware added.
2025-09-06 11:02:01,959 |  INFO: API routers mounted under prefix: /api/v1
2025-09-06 11:02:01,960 |  INFO: Mounted static files directory '/Users/felixpoitras/git/strx/.venv/lib/python3.11/site-packages/solace_agent_mesh/client/webui/frontend/static' at '/'
2025-09-06 11:02:01,961 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  [_start_listener] FastAPI/Uvicorn server starting in background thread on http://127.0.0.1:8000
2025-09-06 11:02:01,962 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Starting _message_processor_loop as an asyncio task.
2025-09-06 11:02:01,962 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Starting message processor loop...
2025-09-06 11:02:02,323 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  [_start_listener] FastAPI startup event triggered.
2025-09-06 11:02:02,324 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  [_start_listener] Captured FastAPI event loop via startup event: <uvloop.Loop running=True closed=False debug=False>
2025-09-06 11:02:02,324 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Ensuring visualization flow is running...
2025-09-06 11:02:02,324 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>] [EnsureVizFlow] Initializing internal A2A visualization flow...
2025-09-06 11:02:02,324 |  WARNING: Invalid 'config_parameters' in app_schema for app 'gdk-gateway-68d417d6_viz_internal_app' (must be a list). Skipping validation.
2025-09-06 11:02:02,324 |  DEBUG: Initializing standard flows for app gdk-gateway-68d417d6_viz_internal_app
2025-09-06 11:02:02,324 |  INFO: Creating flow gdk-gateway-68d417d6_viz_flow in app gdk-gateway-68d417d6_viz_internal_app
2025-09-06 11:02:02,324 |  DEBUG: [solace_ai_connector.gdk-gateway-68d417d6_viz_flow.gdk-gateway-68d417d6_viz_broker_input]  Applying default value for parameter 'broker_type': solace
2025-09-06 11:02:02,324 |  DEBUG: [solace_ai_connector.gdk-gateway-68d417d6_viz_flow.gdk-gateway-68d417d6_viz_broker_input]  Applying default value for parameter 'create_queue_on_start': True
2025-09-06 11:02:02,324 |  DEBUG: [solace_ai_connector.gdk-gateway-68d417d6_viz_flow.gdk-gateway-68d417d6_viz_broker_input]  Applying default value for parameter 'payload_encoding': utf-8
2025-09-06 11:02:02,324 |  DEBUG: [solace_ai_connector.gdk-gateway-68d417d6_viz_flow.gdk-gateway-68d417d6_viz_broker_input]  Applying default value for parameter 'payload_format': json
2025-09-06 11:02:02,324 |  DEBUG: Using component_class VisualizationForwarderComponent for component 'gdk-gateway-68d417d6_viz_forwarder'
2025-09-06 11:02:02,325 |  INFO: [solace_ai_connector.gdk-gateway-68d417d6_viz_flow.gdk-gateway-68d417d6_viz_forwarder]  VisualizationForwarderComponent initialized.
2025-09-06 11:02:02,325 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>] [EnsureVizFlow] Internal visualization app started.
2025-09-06 11:02:02,325 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>] [EnsureVizFlow] Obtained reference to internal BrokerInput component.
2025-09-06 11:02:02,325 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Starting visualization message processor task.
2025-09-06 11:02:02,325 |  INFO: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>] [VizMsgProcessor] Starting visualization message processor loop...
2025-09-06 11:02:02,912 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:02,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:02:02,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'append_to_artifact' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'list_artifacts' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'load_artifact' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'signal_artifact_for_return' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,915 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'apply_embed_and_create_artifact' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,915 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'extract_content_from_artifact' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,915 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'delete_artifact' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,915 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool 'create_chart_from_plotly_config' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,915 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool '_notify_artifact_save' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,915 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Tool '_continue_generation' in manifest is missing 'tags' field. Defaulting to empty list.
2025-09-06 11:02:02,916 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:02:02,917 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:02:02,917 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:02:02,917 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:02:02,917 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:02:02,918 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:02:02,920 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:02,921 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:02,921 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:02:02,922 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:02:02,922 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:02,922 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:02,922 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:02:02,923 |  INFO: [CoreA2AService]Added new agent via discovery: OrchestratorAgent
2025-09-06 11:02:11,920 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:11,920 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:11,920 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:11,921 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:11,921 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:11,921 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:12,332 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:02:12,333 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:02:12,909 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:12,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:02:12,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:02:12,910 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:02:12,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:02:12,911 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:02:12,911 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:02:12,911 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:02:12,912 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:12,912 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:12,913 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:02:12,913 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:02:12,913 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:12,913 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:12,913 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:02:21,928 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:21,928 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:21,928 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:21,928 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:21,929 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:21,929 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:22,337 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:02:22,340 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:02:22,912 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:22,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:02:22,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:02:22,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:02:22,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:02:22,913 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:02:22,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:02:22,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:02:22,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:22,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:22,915 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:02:22,916 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:02:22,916 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:22,916 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:22,916 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:02:31,935 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:31,935 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:31,935 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:31,935 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:31,936 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:31,936 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:32,341 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:02:32,342 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:02:32,912 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:32,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:02:32,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:02:32,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:02:32,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:02:32,913 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:02:32,913 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:02:32,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:02:32,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:32,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:32,916 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:02:32,916 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:02:32,917 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:32,917 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:32,917 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:02:41,938 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:41,938 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:41,939 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:41,940 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:41,940 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:41,943 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:42,346 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:02:42,347 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:02:42,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:42,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:02:42,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:02:42,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:02:42,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:02:42,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:02:42,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:02:42,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:02:42,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:42,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:42,917 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:02:42,920 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:02:42,920 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:42,920 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:42,920 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:02:51,942 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:51,942 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:51,943 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:02:51,943 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:02:51,943 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:51,947 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:02:52,349 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:02:52,352 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:02:52,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:02:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:02:52,911 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:02:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:02:52,912 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:02:52,912 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:02:52,912 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:02:52,912 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:52,913 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:02:52,913 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:02:52,913 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:02:52,913 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:52,913 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:02:52,913 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:03:01,945 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:01,945 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:01,946 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:01,948 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:01,948 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:01,950 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:02,350 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:03:02,358 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:03:02,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:02,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:03:02,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:03:02,914 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:03:02,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:03:02,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:03:02,915 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:03:02,915 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:03:02,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:02,917 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:02,919 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:03:02,920 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:03:02,920 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:02,920 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:02,920 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:03:11,951 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:11,951 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:11,951 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:11,952 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:11,953 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:11,953 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:12,355 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:03:12,363 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:03:12,906 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:12,907 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:03:12,908 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:03:12,909 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:03:12,909 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:03:12,909 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:03:12,909 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:03:12,910 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:03:12,911 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:12,911 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:12,913 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:03:12,914 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:03:12,914 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:12,914 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:12,915 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:03:21,955 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:21,955 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:21,955 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:21,955 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:21,956 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:21,956 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:22,356 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:03:22,369 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:03:22,910 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:22,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:03:22,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:03:22,912 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:03:22,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:03:22,912 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:03:22,913 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:03:22,913 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:03:22,914 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:22,914 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:22,915 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:03:22,915 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:03:22,915 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:22,916 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:22,916 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:03:31,959 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:31,960 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:31,960 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:31,960 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:31,960 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:31,960 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:32,360 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:03:32,371 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:03:32,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:32,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:03:32,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:03:32,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:03:32,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:03:32,913 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:03:32,913 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:03:32,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:03:32,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:32,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:32,915 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:03:32,916 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:03:32,916 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:32,916 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:32,916 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:03:41,963 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:41,963 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:41,964 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:41,965 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:41,965 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:41,965 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:42,366 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:03:42,377 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:03:42,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:42,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:03:42,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:03:42,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:03:42,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:03:42,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:03:42,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:03:42,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:03:42,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:42,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:42,916 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:03:42,917 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:03:42,917 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:42,917 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:42,917 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:03:51,966 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:51,967 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:51,967 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:51,967 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:03:51,968 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:03:51,969 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:03:52,372 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:03:52,381 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:03:52,910 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:03:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:03:52,912 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:03:52,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:03:52,912 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:03:52,912 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:03:52,913 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:03:52,914 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:52,914 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:03:52,914 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:03:52,917 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:03:52,917 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:52,917 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:03:52,917 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:01,967 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:01,971 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:01,971 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:01,973 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:01,973 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:01,973 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:02,373 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:02,386 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:02,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:02,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:04:02,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:04:02,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:04:02,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:04:02,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:04:02,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:04:02,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:04:02,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:02,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:02,918 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:04:02,920 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:04:02,920 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:02,920 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:02,921 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:11,971 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:11,972 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:11,973 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:11,975 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:11,975 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:11,979 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:12,377 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:12,388 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:12,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:12,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:04:12,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:04:12,913 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:04:12,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:04:12,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:04:12,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:04:12,914 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:04:12,915 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:12,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:12,916 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:04:12,917 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:04:12,918 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:12,919 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:12,919 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:21,974 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:21,977 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:21,978 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:21,978 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:21,981 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:21,985 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:22,380 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:22,392 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:22,908 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:22,909 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:04:22,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:04:22,910 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:04:22,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:04:22,910 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:04:22,911 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:04:22,911 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:04:22,913 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:22,913 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:22,913 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:04:22,916 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:04:22,916 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:22,916 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:22,916 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:31,979 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:31,981 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:31,981 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:31,981 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:31,982 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:31,987 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:32,386 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:32,398 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:32,911 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:32,912 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:04:32,913 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:04:32,914 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:04:32,914 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:04:32,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:04:32,914 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:04:32,915 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:04:32,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:32,916 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:32,917 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:04:32,919 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:04:32,919 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:32,919 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:32,919 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:41,985 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:41,985 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:41,985 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:41,985 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:41,985 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:41,991 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:42,391 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:42,399 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:42,908 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:42,909 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:04:42,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:04:42,910 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:04:42,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:04:42,910 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:04:42,911 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:04:42,911 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:04:42,912 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:42,912 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:42,913 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:04:42,915 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:04:42,915 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:42,915 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:42,916 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:51,989 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:51,990 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:51,990 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:51,990 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:51,991 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:51,997 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:52,396 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:52,403 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:52,910 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:52,910 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Received timer event: {'timer_id': 'publish_card_OrchestratorAgent', 'payload': None}
2025-09-06 11:04:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Publishing message to topic default_namespace/a2a/v1/discovery/agentcards (size: 7802 bytes)
2025-09-06 11:04:52,911 |  DEBUG: App 'orchestrator-agent_app' sending message via implicit BrokerOutput to topic 'default_namespace/a2a/v1/discovery/agentcards'
2025-09-06 11:04:52,911 |  DEBUG: [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Successfully published Agent Card to default_namespace/a2a/v1/discovery/agentcards
2025-09-06 11:04:52,911 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Component received event from input queue
2025-09-06 11:04:52,912 |  DEBUG: [orchestrator-agent_app_broker_output] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_output]  Sending message from orchestrator-agent_app_broker_output
2025-09-06 11:04:52,912 |  DEBUG: Sending message to broker. | TRACE: Message(payload=None, topic=None, user_properties={}, previous={'payload': {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}, 'topic': 'default_namespace/a2a/v1/discovery/agentcards', 'user_properties': {}}, private_data={}), ack_callbacks=0
2025-09-06 11:04:52,912 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:52,913 |  DEBUG: Received message from broker. | TRACE: {'capabilities': {'extensions': [{'description': 'A UI-friendly display name for the agent.', 'params': {'display_name': 'OrchestratorAgent'}, 'uri': 'https://solace.com/a2a/extensions/display-name'}, {'description': 'A list of tools available to the agent.', 'params': {'tools': [{'description': "\n    Appends a chunk of content to an existing artifact. This operation will\n    create a new version of the artifact. The content_chunk should be a string,\n    potentially base64 encoded if it represents binary data (indicated by mime_type).\n    The chunk size should be limited (e.g., max 3KB) by the LLM.\n\n    Args:\n        filename: The name of the artifact to append to. May contain embeds.\n        content_chunk: The chunk of content to append (max approx. 3KB).\n                       If mime_type suggests binary, this should be base64 encoded.\n                       May contain embeds.\n        mime_type: The MIME type of the content_chunk. This helps determine if\n                   base64 decoding is needed for the chunk. The overall artifact's\n                   MIME type will be preserved from its latest version.\n                   May contain embeds.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new version of the artifact.\n    ", 'id': 'append_to_artifact', 'name': 'append_to_artifact', 'tags': []}, {'description': "\n    Lists all available data artifact filenames and their versions for the current session.\n    Includes a summary of the latest version's metadata for each artifact.\n\n    Args:\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the list of artifacts with metadata summaries or an error.\n    ", 'id': 'list_artifacts', 'name': 'list_artifacts', 'tags': []}, {'description': '\n    Loads the content or metadata of a specific artifact version.\n    Early-stage embeds in the filename argument are resolved.\n\n    If load_metadata_only is True, loads the full metadata dictionary.\n    Otherwise, loads text content (potentially truncated) or binary metadata summary.\n\n    Args:\n        filename: The name of the artifact to load. May contain embeds.\n        version: The specific version number to load. Must be explicitly provided.\n        load_metadata_only (bool): If True, load only the metadata JSON. Default False.\n        max_content_length (Optional[int]): Maximum character length for text content.\n                                           If None, uses app configuration. Range: 100-100,000.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary containing the artifact details and content/metadata or an error.\n    ', 'id': 'load_artifact', 'name': 'load_artifact', 'tags': []}, {'description': '\n    Signals that a specific version of an artifact should be returned to the\n    original caller as part of the final task result.\n\n    Args:\n        filename: The name of the artifact to return. May contain embeds.\n        version: The specific version number to return. Must be explicitly provided.\n    ', 'id': 'signal_artifact_for_return', 'name': 'signal_artifact_for_return', 'tags': []}, {'description': "\n    Resolves an 'artifact_content' embed directive (including modifiers and formatting)\n    and saves the resulting content as a new artifact. The entire embed directive\n    must be provided as a string as the embed_directive argument.\n\n    Args:\n        output_filename: The desired name for the new artifact.\n        embed_directive: The full '«artifact_content:...>>>...>>>format:...»' string.\n        output_metadata (dict, optional): Metadata for the new artifact.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result, including the new filename and version.\n    ", 'id': 'apply_embed_and_create_artifact', 'name': 'apply_embed_and_create_artifact', 'tags': []}, {'description': '\n    Loads an existing artifact, uses an internal LLM to process its content\n    based on an "extraction_goal," and manages the output by returning it\n    or saving it as a new artifact.\n\n    The tool\'s description for the LLM might dynamically update based on\n    the \'supported_binary_mime_types\' configuration of the agent, indicating\n    which binary types it can attempt to process.\n\n    Args:\n        filename (str): Name of the source artifact. May contain embeds.\n        extraction_goal (str): Natural language instruction for the LLM on what\n                               to extract or how to transform the content.\n                               May contain embeds.\n        version (Optional[Union[int, str]]): Version of the source artifact.\n                                             Can be an integer or "latest".\n                                             Defaults to "latest". May contain embeds.\n        output_filename_base (Optional[str]): Optional base name for the new\n                                              artifact if the extracted content\n                                              is saved. May contain embeds.\n        tool_context (ToolContext): Provided by the ADK framework.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the status of the operation,\n                        a message for the LLM, and potentially the extracted\n                        data or details of a newly saved artifact.\n                        Refer to the design document for specific response structures.\n    ', 'id': 'extract_content_from_artifact', 'name': 'extract_content_from_artifact', 'tags': []}, {'description': '\n    Deletes a specific version of an artifact, or all versions if no version is specified.\n\n    Args:\n        filename: The name of the artifact to delete.\n        version: The specific version number to delete. If not provided, all versions will be deleted.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary indicating the result of the deletion.\n    ', 'id': 'delete_artifact', 'name': 'delete_artifact', 'tags': []}, {'description': "\n    Generates a static chart image from a Plotly configuration provided as a string.\n\n    Args:\n        config_content: The Plotly configuration (JSON or YAML) as a string.\n        config_format: The format of the config_content ('json' or 'yaml').\n        output_filename: The desired filename for the output image artifact.\n        output_format: The desired image format ('png', 'jpg', 'svg', 'pdf', etc.). Default 'png'.\n        tool_context: The context provided by the ADK framework.\n\n    Returns:\n        A dictionary with status and output artifact details.\n    ", 'id': 'create_chart_from_plotly_config', 'name': 'create_chart_from_plotly_config', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to confirm that a fenced artifact block has been saved. You MUST NOT call this tool directly.', 'id': '_notify_artifact_save', 'name': '_notify_artifact_save', 'tags': []}, {'description': 'INTERNAL TOOL. This tool is used by the system to continue a response that was interrupted. You MUST NOT call this tool directly.', 'id': '_continue_generation', 'name': '_continue_generation', 'tags': []}]}, 'uri': 'https://solace.com/a2a/extensions/sam/tools'}], 'pushNotifications': False, 'stateTransitionHistory': False, 'streaming': True}, 'defaultInputModes': ['text'], 'defaultOutputModes': ['text', 'file'], 'description': 'The Orchestrator component. It manages tasks and coordinates multi-agent workflows.', 'name': 'OrchestratorAgent', 'preferredTransport': 'JSONRPC', 'protocolVersion': '0.3.0', 'skills': [], 'url': 'solace:default_namespace/a2a/v1/agent/request/OrchestratorAgent', 'version': '1.0.0-alpha'}
2025-09-06 11:04:52,913 |  DEBUG: [orchestrator-agent_app_broker_input] [solace_ai_connector.orchestrator-agent_app_implicit_flow.orchestrator-agent_app_broker_input]  Sending message from orchestrator-agent_app_broker_input
2025-09-06 11:04:52,913 |  DEBUG: [a2a_webui_app_broker_input] [solace_ai_connector.a2a_webui_app_implicit_flow.a2a_webui_app_broker_input]  Sending message from a2a_webui_app_broker_input
2025-09-06 11:04:52,913 |  DEBUG: [<unnamed>] [solace_ai_connector.orchestrator-agent_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:52,913 |  DEBUG: [<unnamed>] [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Component received event from input queue
2025-09-06 11:04:52,913 |  DEBUG: [solace_ai_connector.a2a_webui_app_implicit_flow.<unnamed>]  Received SolaceMessage on topic: default_namespace/a2a/v1/discovery/agentcards. Bridging to internal queue.
2025-09-06 11:04:57,214 |  INFO: Received keyboard interrupt - stopping
2025-09-06 11:04:57,215 |  INFO: Stopping Solace AI Event Connector
2025-09-06 11:04:57,215 |  DEBUG: Stopping timer manager
2025-09-06 11:04:57,215 |  DEBUG: [orchestrator-agent_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:57,215 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:57,215 |  DEBUG: [a2a_webui_app_broker_input] Automatically flushed metrics.
2025-09-06 11:04:57,215 |  DEBUG: [<unnamed>] Automatically flushed metrics.
2025-09-06 11:04:57,215 |  DEBUG: [a2a_webui_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:57,215 |  DEBUG: [orchestrator-agent_app_broker_output] Automatically flushed metrics.
2025-09-06 11:04:57,216 |  DEBUG: [gdk-gateway-68d417d6_viz_broker_input] Automatically flushed metrics.
2025-09-06 11:04:57,216 |  DEBUG: [gdk-gateway-68d417d6_viz_forwarder] Automatically flushed metrics.
2025-09-06 11:04:57,216 |  DEBUG: Timer manager stopped
2025-09-06 11:04:57,217 |  DEBUG: Cache service stopped
